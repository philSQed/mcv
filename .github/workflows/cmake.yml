name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_SCANNER_VERSION: 4.6.2.2472
      BUILD_WRAPPER_OUT_DIR_ROOT: bwout # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Prepare environment
        run: sudo apt-get install -y g++-10 g++-10-multilib
    
      - name: Download and install the build wrapper
        run: |
          mkdir ${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}
          mkdir $HOME/.sonar
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ secrets.SONAR_HOST_URL }}/static/cpp/build-wrapper-linux-x86.zip
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/

      - name: Build-Main
        env:
          CXX: g++-10
          IS_32: 0
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          $HOME/.sonar/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}/Main cmake --build build
          ls ${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}/Main

      - name: Build-Debug
        env:
          CXX: g++-10
          IS_32: 0
        run: |
          rm -rf build
          rm -rf cmake-build-*
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug
          $HOME/.sonar/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}/Debug cmake --build build
          ls ${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}/Debug

      - name: Build-Clang
        env:
          CXX: clang++
          IS_32: 0
        run: |
          rm -rf build
          rm -rf cmake-build-*
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          $HOME/.sonar/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}/Clang cmake --build build
          ls ${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}/Clang

      - name: Build-32
        env:
          CXX: g++-10
          IS_32: 1
        run: |
          rm -rf build
          rm -rf cmake-build-*
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          $HOME/.sonar/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}/32 cmake --build build
          ls ${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}/32
          ls ${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}
          

      - name: Download and install the SonarScanner
        run: |
          curl -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
          
      - name: SonarQube analysis
        run: |
          sonar-scanner --define sonar.cfamily.variants.dir=${{ env.BUILD_WRAPPER_OUT_DIR_ROOT }}

